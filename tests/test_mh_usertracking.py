"""
This script does a fairly simple check that useraction events generated by the paella
player are recorded in the MH db and subsequently available via the api. It first
creates a player session for a video identified by a `--mpid` command-line option.
It manipulates the play/pause functionality, then waits for bit to ensure a HEARTBEAT
event is generated. It then fetches the recent useraction entries via the API and
uses the session id to confirm that the appropriate events were created.
"""

import arrow
from time import sleep


def test_play_pause_heartbeat(opt_getter, engage_api, player_getter):

    mpid = opt_getter('mpid')
    assert mpid is not None, "missing command-line arg: mpid"

    player = player_getter(mpid)

    # play via canvas click
    player.find_by_css('#paella_plugin_PlayButtonOnScreen > canvas').click()
    sleep(1)
    # pause via canvas click
    player.find_by_css('#overlayContainer').click()
    sleep(1)

    # play via toolbar button
    player.find_by_css('#buttonPlugin0').click()
    sleep(1)
    # pause via toolbar button
    player.find_by_css('#buttonPlugin0').click()

    # sleep long enough to generate a heartbeat
    sleep(30)

    # get our session id so we can find the matching useraction events
    session_id = player.cookies['JSESSIONID']
    player.quit()

    ua_start = arrow.now().replace(minutes=-1).format("YYYYMMDDHHmmss")
    ua_end = arrow.now().format('YYYYMMDDHHmmss')

    # get all the useraction events for the past minute
    useractions = engage_api.user_actions(start=ua_start, end=ua_end, limit=100000)

    # filter to just the events with our session id
    useractions = [x for x in useractions if x.sessionId['sessionId'] == session_id]

    # check that we got what's expected
    assert 2 == len([x for x in useractions if x.type == 'PLAY'])
    assert 2 == len([x for x in useractions if x.type == 'PAUSE'])
    assert 1 == len([x for x in useractions if x.type == 'HEARTBEAT'])
